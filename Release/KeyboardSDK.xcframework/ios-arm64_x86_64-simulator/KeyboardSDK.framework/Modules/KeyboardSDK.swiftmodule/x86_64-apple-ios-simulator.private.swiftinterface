// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KeyboardSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import DeveloperToolsSupport
import Foundation
@_exported import KeyboardSDK
import KeyboardSDKCore
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ENPPZWebViewController : UIKit.UIViewController, WebKit.WKUIDelegate, WebKit.WKNavigationDelegate, UIKit.UIScrollViewDelegate, KeyboardSDKCore.ENViewPrsenter {
  @_Concurrency.MainActor(unsafe) public static func create() -> KeyboardSDK.ENPPZWebViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ENButtonConstant {
  public static let SETTING: Swift.Int
  public static let EMOJI: Swift.Int
  public static let AD: Swift.Int
  public static let CLIP_BOARD: Swift.Int
  public static let BOOK_MARK: Swift.Int
  public static let GAME: Swift.Int
  public static let ADD_TYPE: Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ENInputViewController : UIKit.UIInputViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class URLUtil : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ENMainViewController : UIKit.UIViewController, KeyboardSDKCore.ENViewPrsenter {
  @_Concurrency.MainActor(unsafe) public static func create() -> KeyboardSDK.ENMainViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct PPZErrorModel : Swift.Codable, KeyboardSDKCore.DHCodable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ENAPIConst {
}
@_hasMissingDesignatedInitializers public class ENKeyboardSDKInfo {
  public static var version: Swift.String {
    get
  }
  public static var coreSDKVersion: Swift.String {
    get
  }
  @objc deinit
}
public protocol ENKeyboardCustomAreaViewDelegate : AnyObject {
  func enKeyboardCusomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, openMainPage completion: (() -> Swift.Void)?)
  func enKeyboardCusomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, showEmojiView completion: (() -> Swift.Void)?)
  func enKeyboardCusomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, showCoupangView completion: (() -> Swift.Void)?)
  func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, text: Swift.String, pasteText completion: (() -> Swift.Void)?)
  func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, moveApp completion: (() -> Swift.Void)?)
  func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, movePPZone completion: (() -> Swift.Void)?)
  func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, moveCoupang completion: (() -> Swift.Void)?)
  func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, movePointList completion: (() -> Swift.Void)?)
  func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, moveSetting completion: (() -> Swift.Void)?)
  func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, moveCashDeal completion: (() -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ENKeyboardCustomAreaView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyboardTheme: KeyboardSDKCore.ENKeyboardTheme? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyboardThemeModel: KeyboardSDKCore.ENKeyboardThemeModel? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func resetButtonStatus()
  @_Concurrency.MainActor(unsafe) public func setScrollViewConstraint()
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func showErrorMessage(message: Swift.String)
  @_Concurrency.MainActor(unsafe) public func open(url: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func openURL(_ url: Foundation.URL) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ENThemeCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ENKeyboardSDK {
  public static let shared: KeyboardSDK.ENKeyboardSDK
  public var SDK_VERSION: Swift.String {
    get
  }
  public func sdkInit()
  public func setDebug(isDebug: Swift.Bool)
  public func isKeyboardExtensionEnabled() -> Swift.Bool
  @available(iOS 13.0, iOSApplicationExtension 13.0, *)
  public func openByUniversalLink(url: Foundation.URL, sceneDelegate: any UIKit.UIWindowSceneDelegate) -> Swift.Bool
  public func openByUniversalLink(url: Foundation.URL, appDelegate: any UIKit.UIApplicationDelegate) -> Swift.Bool
  public func saveUUID(_ uuid: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ENKeyboardSDKSchemeManager {
  public static let scheme: Swift.String
  public static var path: Swift.String {
    get
  }
  public static var fullAccessPage: Swift.String {
    get
  }
  public static var selfApp: Swift.String {
    get
  }
  public static var ppzone: Swift.String {
    get
  }
  public static var keyboardSetting: Swift.String {
    get
  }
  public static var keyboardCashDeal: Swift.String {
    get
  }
  public static var keyboardInquiry: Swift.String {
    get
  }
  public static var theme: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ENPlusInputViewManager {
  public static let shared: KeyboardSDK.ENPlusInputViewManager
  public var inputViewController: UIKit.UIInputViewController?
  public func viewDidLoad()
  public func viewWillLayoutSubviews()
  public func viewWillAppear(_ animated: Swift.Bool)
  public func viewDidAppear(_ animated: Swift.Bool)
  public func viewWillDisappear(_ animated: Swift.Bool)
  public func textWillChange(_ textInput: (any UIKit.UITextInput)?)
  public func textDidChange(_ textInput: (any UIKit.UITextInput)?)
  @objc deinit
}
extension KeyboardSDK.ENPlusInputViewManager : KeyboardSDKCore.ENKeyboardManagerDelegate {
  public func textInputted(manager: KeyboardSDKCore.ENKeyboardManager, text: Swift.String?)
  public func handleInputModeList(manager: KeyboardSDKCore.ENKeyboardManager)
  public func showEmojiView(manager: KeyboardSDKCore.ENKeyboardManager)
}
extension KeyboardSDK.ENPlusInputViewManager : KeyboardSDK.ENKeyboardCustomAreaViewDelegate {
  public func enKeyboardCusomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, openMainPage completion: (() -> Swift.Void)?)
  public func enKeyboardCusomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, showEmojiView completion: (() -> Swift.Void)?)
  public func enKeyboardCusomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, showCoupangView completion: (() -> Swift.Void)?)
  public func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, text: Swift.String, pasteText completion: (() -> Swift.Void)?)
  public func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, cursorStyle: Swift.String, cursorMove: (() -> Swift.Void)?)
  public func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, moveApp completion: (() -> Swift.Void)?)
  public func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, movePPZone completion: (() -> Swift.Void)?)
  public func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, moveCoupang completion: (() -> Swift.Void)?)
  public func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, movePointList completion: (() -> Swift.Void)?)
  public func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, moveSetting completion: (() -> Swift.Void)?)
  public func enKeyboardCustomAreaView(_ customAreaView: KeyboardSDK.ENKeyboardCustomAreaView, targetButton: UIKit.UIButton, moveCashDeal completion: (() -> Swift.Void)?)
}
extension KeyboardSDK.ENPlusInputViewManager : KeyboardSDKCore.ENKeyboardViewManagerDelegate {
  public func enKeyboardViewManager(_ delegate: KeyboardSDKCore.ENKeyboardViewManager, restoreToKeyboard: Swift.Bool)
}
@_hasMissingDesignatedInitializers public class ENKeyboardAPIManeger {
  public func callSendRewardPoint(_ zone_id: Swift.String, completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func callUpdateUserInfo(completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func callBrandUtil(completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func getUserTotalPoint(completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func getUserCheckPoint(completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func getUserPoint(completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func callSendPoint(completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func getNews(completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func getBannerPoint(isMainBanner isMain: Swift.Bool, completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func getTabDetail(completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func callSetUserInfo(completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
